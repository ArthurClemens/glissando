{"version":3,"file":"glissando-react.js","sources":["../src/GlissandoSlider.tsx","../src/useGlissandoModel.ts"],"sourcesContent":["import { useEffectRef } from '@huse/effect-ref';\nimport { getSliderStyle, Glissando } from 'glissando';\nimport {\n  ReactNode,\n  RefCallback,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\n\ntype Props = {\n  /**\n   * The slider model.\n   */\n  model: Glissando.Model;\n\n  /**\n   * The elements to slide.\n   */\n  children: ReactNode[];\n\n  /**\n   * (directed use) List of location ids, for example: possible route paths.\n   */\n  locations?: string[];\n\n  /**\n   * (directed use) The current location id, for example: the current route path.\n   */\n  location?: string;\n\n  /**\n   * Extra class name.\n   */\n  className?: string;\n};\n\nexport const GlissandoSlider = (props: Props) => {\n  const {\n    model,\n    children,\n    locations,\n    location,\n    className: sliderClassName,\n  } = props;\n  const [sliderNode, setSliderNode] = useState<HTMLDivElement>();\n  const {\n    getState,\n    finalize,\n    setCount,\n    setDirection,\n    getViewIndices,\n    setLocations,\n    goTo,\n  } = model;\n\n  /* SIDE EFFECTS */\n\n  // Child count\n  useEffect(() => {\n    const count = (children || []).length;\n    if (count !== getState().count) {\n      setCount(count);\n    }\n  }, [children, getState, setCount]);\n\n  // Locations\n  useEffect(() => {\n    if (\n      locations &&\n      JSON.stringify(locations) !== JSON.stringify(getState().locations)\n    ) {\n      setLocations(locations);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [locations]);\n\n  // Location\n  useEffect(() => {\n    if (location && location !== getState().location) {\n      goTo({ location });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  // Event listener: transitionend\n  const observeTransitionEnd: RefCallback<HTMLDivElement> = useCallback(\n    (node: HTMLDivElement) => {\n      if (node === null) {\n        return <></>;\n      }\n      setSliderNode(node);\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const onTransitionEnd = (evt: Event) => {\n        finalize(getState().targetIndex);\n      };\n      node.addEventListener('transitionend', onTransitionEnd);\n\n      return () => {\n        node.removeEventListener('transitionend', onTransitionEnd);\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n\n  // Reading direction\n  useEffect(() => {\n    if (!sliderNode) {\n      return;\n    }\n    const { direction } = getComputedStyle(sliderNode);\n    if (direction !== getState().direction) {\n      setDirection(direction as Glissando.Direction);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  const sliderRef = useEffectRef((node: HTMLDivElement) =>\n    observeTransitionEnd(node),\n  );\n\n  /* END SIDE EFFECTS */\n\n  if (!children) {\n    return <></>;\n  }\n\n  const { className, style } = getSliderStyle(getState());\n\n  return (\n    <div className={['glissando', sliderClassName].join(' ')}>\n      <div\n        className={`glissando-slider ${className}`}\n        style={style}\n        ref={sliderRef}\n      >\n        {getViewIndices().map(viewIndex => (\n          <div key={viewIndex} className=\"glissando-page\">\n            {children[viewIndex]}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { Glissando, GlissandoModel } from 'glissando';\nimport { useState } from 'react';\nimport { useStream } from 'use-stream';\n\ntype TModel = {\n  _: Glissando.States;\n};\n\n/**\n * Wrapper around GlissandoModel that subscribes to changes and causes React to redraw on each change.\n */\nexport const useGlissandoModel = (initialState?: Glissando.InitialState) => {\n  const [model] = useState<Glissando.Model>(GlissandoModel(initialState));\n\n  // Subscribe to changes\n  useStream<TModel>({\n    model: () => ({\n      _: model.getState,\n    }),\n    defer: true,\n  });\n\n  return model;\n};\n"],"names":["props","model","children","locations","location","className","sliderClassName","sliderNode","setSliderNode","useState","getState","finalize","setCount","setDirection","getViewIndices","setLocations","goTo","useEffect","count","length","JSON","stringify","observeTransitionEnd","useCallback","node","_jsx","onTransitionEnd","evt","targetIndex","addEventListener","removeEventListener","direction","getComputedStyle","sliderRef","useEffectRef","style","getSliderStyle","join","ref","map","viewIndex","initialState","GlissandoModel","useStream","_","defer"],"mappings":"4sBAqCgCA,IAC9B,MAAMC,MACJA,EAAKC,SACLA,EAAQC,UACRA,EAASC,SACTA,EACAC,UAAWC,GACTN,GACGO,EAAYC,GAAiBC,cAC9BC,SACJA,EAAQC,SACRA,EAAQC,SACRA,EAAQC,aACRA,EAAYC,eACZA,EAAcC,aACdA,EAAYC,KACZA,GACEf,EAKJgB,aAAU,KACR,MAAMC,GAAShB,GAAY,IAAIiB,OAC3BD,IAAUR,IAAWQ,OACvBN,EAASM,KAEV,CAAChB,EAAUQ,EAAUE,IAGxBK,aAAU,KAENd,GACAiB,KAAKC,UAAUlB,KAAeiB,KAAKC,UAAUX,IAAWP,YAExDY,EAAaZ,KAGd,CAACA,IAGJc,aAAU,KACJb,GAAYA,IAAaM,IAAWN,UACtCY,EAAK,CAAEZ,SAAAA,MAGR,CAACA,IAGJ,MAAMkB,EAAoDC,eACvDC,IACC,GAAa,OAATA,EACF,OAAOC,4BAETjB,EAAcgB,GAEd,MAAME,EAAmBC,IACvBhB,EAASD,IAAWkB,cAItB,OAFAJ,EAAKK,iBAAiB,gBAAiBH,GAEhC,KACLF,EAAKM,oBAAoB,gBAAiBJ,MAI9C,IAIFT,aAAU,KACR,IAAKV,EACH,OAEF,MAAMwB,UAAEA,GAAcC,iBAAiBzB,GACnCwB,IAAcrB,IAAWqB,WAC3BlB,EAAakB,KAGd,CAAC/B,IAEJ,MAAMiC,EAAYC,gBAAcV,GAC9BF,EAAqBE,KAKvB,IAAKtB,EACH,OAAOuB,4BAGT,MAAMpB,UAAEA,EAAS8B,MAAEA,GAAUC,iBAAe1B,KAE5C,OACEe,2BAAKpB,UAAW,CAAC,YAAaC,GAAiB+B,KAAK,gBAClDZ,2BACEpB,UAAW,oBAAoBA,IAC/B8B,MAAOA,EACPG,IAAKL,aAEJnB,IAAiByB,KAAIC,GACpBf,2BAAqBpB,UAAU,4BAC5BH,EAASsC,KADFA,8CC/HcC,IAChC,MAAOxC,GAASQ,WAA0BiC,iBAAeD,IAUzD,OAPAE,YAAkB,CAChB1C,MAAO,MACL2C,EAAG3C,EAAMS,WAEXmC,OAAO,IAGF5C"}